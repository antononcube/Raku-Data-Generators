use Test;

use lib '.';
use lib './lib';

use Data::Generators;

plan 15;

## 1
ok random-word(8), 'simple call 1';

## 2
ok random-word(1), 'simple call 2';

## 3
is random-word(12, type => 'known').all ~~ Str,
        True,
        'list of 12 known words';

## 4
is random-word(12, type => 'Any').all ~~ Str,
        True,
        'list of 12 Any words';

## 5
is random-word(100, type => 'common').all ~~ Str,
        True,
        'list of 100 common words';

## 6
is random-word(100, type => 'stop').all ~~ Str,
        True,
        'list of 100 stop words';

## 7
is random-word(100, type => Whatever).all ~~ Str,
        True,
        'list of 100 Whatever words';

## 8
is random-word(100, type => Whatever, method => &pick).all ~~ Str,
        True,
        'list of picked 100 Whatever words';

## 9
dies-ok { random-word(0) },
        'Zero number of words';

## 10
dies-ok { random-word(-3) },
        'Negative number of words';

## 11
is random-word(Whatever).elems ≥ 84_996, True,
        'Whatever number of words';

## 12
is random-word(Whatever, method => WhateverCode).elems ≥ 84_996, True,
        'Whatever number of words with WhateverCode method';

## 13
is random-word(Inf, method => WhateverCode).elems ≥ 84_996, True,
        'Inf number of words with WhateverCode method';

## 14
isa-ok random-word(), Str,
        'No size argument gives a string';

## 15
isa-ok random-word(type => 'common', method => &pick), Str,
        'No size argument with options gives a string';

done-testing;
